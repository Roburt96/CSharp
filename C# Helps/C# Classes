                                      - Constructors -

// Create a Car class
class Car
{
  public string model;  // Create a field

  // Create a class constructor for the Car class
  public Car()
  {
    model = "Mustang"; // Set the initial value for model
  }

  static void Main(string[] args)
  {
    Car Ford = new Car();  // Create an object of the Car Class (this will call the constructor)
    Console.WriteLine(Ford.model);  // Print the value of model
  }
}

// Outputs "Mustang"

################################################################################################

                                             - Access Modifiers -

public	=> The code is accessible for all classes
private	 => The code is only accessible within the same class
protected	=> The code is accessible within the same class, or in a class that is inherited from that class. 
internal	=> The code is only accessible within its own assembly, but not from another assembly. 

################################################################################################

                                         - Properties - /Encapsulation/

class Person
{
  private string name; // field

  public string Name   // property
  {
    get { return name; }   // get method
    set { name = value; }  // set method
  }
}

*** Automatic Properties (Short Hand) ***

class Person
{
  public string Name  // property
  { get; set; }
}

class Program
{
  static void Main(string[] args)
  {
    Person myObj = new Person();
    myObj.Name = "Liam";
    Console.WriteLine(myObj.Name);
  }
}

################################################################################################

                                             - Inheritance - 

class Vehicle  // base class (parent) 
{
  public string brand = "Ford";  // Vehicle field
  public void honk()             // Vehicle method 
  {                    
    Console.WriteLine("Tuut, tuut!");
  }
}

class Car : Vehicle  // derived class (child)
{
  public string modelName = "Mustang";  // Car field
}

class Program
{
  static void Main(string[] args)
  {
    // Create a myCar object
    Car myCar = new Car();

    // Call the honk() method (From the Vehicle class) on the myCar object
    myCar.honk();

    // Display the value of the brand field (from the Vehicle class) and the value of the modelName from the Car class
    Console.WriteLine(myCar.brand + " " + myCar.modelName);
  }
}

################################################################################################

                                         - Polymorphism -

override => keyword for each derived class methods:

class Animal  // Base class (parent) 
{
  public virtual void animalSound() 
  {
    Console.WriteLine("The animal makes a sound");
  }
}

class Pig : Animal  // Derived class (child) 
{
  public override void animalSound() 
  {
    Console.WriteLine("The pig says: wee wee");
  }
}

class Dog : Animal  // Derived class (child) 
{
  public override void animalSound() 
  {
    Console.WriteLine("The dog says: bow wow");
  }
}

class Program 
{
  static void Main(string[] args) 
  {
    Animal myAnimal = new Animal();  // Create a Animal object
    Animal myPig = new Pig();  // Create a Pig object
    Animal myDog = new Dog();  // Create a Dog object

    myAnimal.animalSound();
    myPig.animalSound();
    myDog.animalSound();
  }
}

################################################################################################
                                        - Abstraction -
Abstract class: is a restricted class that cannot be used to create objects 
(to access it, it must be inherited from another class).

Abstract method: can only be used in an abstract class, and it does not have a body. 
The body is provided by the derived class (inherited from).


abstract class Animal 
{
  public abstract void animalSound();
  public void sleep() 
  {
    Console.WriteLine("Zzz");
  }
}     

#################################################################################################################
                                        - Interface -

An interface is a completely "abstract class", 
which can only contain abstract methods and properties (with empty bodies):                                                                     


// Interface
interface IAnimal 
{
  void animalSound(); // interface method (does not have a body)
}

// Pig "implements" the IAnimal interface
class Pig : IAnimal 
{
  public void animalSound() 
  {
    // The body of animalSound() is provided here
    Console.WriteLine("The pig says: wee wee");
  }
}

class Program 
{
  static void Main(string[] args) 
  {
    Pig myPig = new Pig();  // Create a Pig object
    myPig.animalSound();
  }
}


################################################################################################################
                                                    - Enums -
Enum is short for "enumerations", which means "specifically listed".
An enum is a special "class" that represents a group of constants (unchangeable/read-only variables).
To create an enum, use the enum keyword (instead of class or interface), and separate the enum items with a comma:   

class Program
{
  enum Level
  {
    Low,
    Medium,
    High
  }
  static void Main(string[] args)
  {
    Level myVar = Level.Medium;
    Console.WriteLine(myVar);
  }
}
Output: Medium      

##############################################################################################################
                                                        - Files -
                                                        
 using System.IO;  // include the System.IO namespace
 
 File.SomeFileMethod();  // use the file class with methods                                                       
                                                        
                                                        
AppendText()   =>	Appends text at the end of an existing file
Copy()         =>	Copies a file
Create()	   =>   Creates or overwrites a file
Delete()	   =>   Deletes a file
Exists()	   =>   Tests whether the file exists
ReadAllText()  =>	Reads the contents of a file
Replace()	   =>   Replaces the contents of a file with the contents of another file
WriteAllText() =>   Creates a new file and writes the contents to it. If the file already exists, it will be overwritten.                                         


##############################################################################################################
                                                - Exceptions -
Syntax
try 
{
  //  Block of code to try
}
catch (Exception e)
{
  //  Block of code to handle errors
}

Example

try
{
  int[] myNumbers = {1, 2, 3};
  Console.WriteLine(myNumbers[10]);
}
catch (Exception e)
{
  Console.WriteLine(e.Message);
}
























